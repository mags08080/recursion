# -*- coding: utf-8 -*-
"""recursion_assignment

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x5k19PTAkDY9FxNur3qHUEdqR8nzw01s
"""

## Q. Write a Python program using recursion to calculate the sum of all numbers from 1 to n.
##Output: The sum of numbers from 1 to 5 is: 15
def sum_of_numbers(n):
  if n == 1: #base case
    return 1
  else:
    return n + sum_of_numbers(n-1) #recursive case

print("The sum of numbers from 1 to 5 is:",sum_of_numbers(5))

## Q. Write a Python program to reverse a string using recursion.
##Output: The reverse of hello is: olleh
def reverse_string(string):
  if len(string) == 1: #base case
    return string
  else:
    return string[-1] + reverse_string(string[:-1]) #recursive case

print("The reverse of hello is:",reverse_string('hello'))

## Q. Write a Python program using recursion to check if a string is a Palindrome.
def is_palindrome(string):
  #remove space and lower case string
  string = string.replace(" ","").lower()
  if len(string) == 1: #base case
    return True
    #if char at index 0 = char at last index of string
  elif string[0] == string[-1]:
    return is_palindrome(string[1:-1]) #recursive case
  else:
    return False

print(is_palindrome("racecar"))
print(is_palindrome("maggie"))

## Q. Write the base case for a function that calculates the factorial of a number using recursion.
def factorial(n):
  if n == 1: #base case
    return 1
  else:
    return n * factorial(n-1) #recursive case

print(factorial(3))

## Q. What is wrong with the following code for computing Fibonacci numbers?
def fibonacci(n):
  if n == 1: #base case
    return 0
  elif n == 2: #base case
    return 1
  else:
    return fibonacci(n-1) + fibonacci(n-2) #recursive

